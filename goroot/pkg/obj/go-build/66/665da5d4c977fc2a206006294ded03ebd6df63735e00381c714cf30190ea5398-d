
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"


	"testing"
	"testing/internal/testdeps"


	_ "fmt"


	_xtest "fmt_test"

)

var tests = []testing.InternalTest{

	{"TestErrorf", _xtest.TestErrorf},

	{"TestFmtInterface", _xtest.TestFmtInterface},

	{"TestSprintf", _xtest.TestSprintf},

	{"TestComplexFormatting", _xtest.TestComplexFormatting},

	{"TestReorder", _xtest.TestReorder},

	{"TestCountMallocs", _xtest.TestCountMallocs},

	{"TestFlagParser", _xtest.TestFlagParser},

	{"TestStructPrinter", _xtest.TestStructPrinter},

	{"TestSlicePrinter", _xtest.TestSlicePrinter},

	{"TestMapPrinter", _xtest.TestMapPrinter},

	{"TestEmptyMap", _xtest.TestEmptyMap},

	{"TestBlank", _xtest.TestBlank},

	{"TestBlankln", _xtest.TestBlankln},

	{"TestFormatterPrintln", _xtest.TestFormatterPrintln},

	{"TestWidthAndPrecision", _xtest.TestWidthAndPrecision},

	{"TestPanics", _xtest.TestPanics},

	{"TestBadVerbRecursion", _xtest.TestBadVerbRecursion},

	{"TestIsSpace", _xtest.TestIsSpace},

	{"TestNilDoesNotBecomeTyped", _xtest.TestNilDoesNotBecomeTyped},

	{"TestFormatterFlags", _xtest.TestFormatterFlags},

	{"TestParsenum", _xtest.TestParsenum},

	{"TestAppendf", _xtest.TestAppendf},

	{"TestAppend", _xtest.TestAppend},

	{"TestAppendln", _xtest.TestAppendln},

	{"TestScan", _xtest.TestScan},

	{"TestScanln", _xtest.TestScanln},

	{"TestScanf", _xtest.TestScanf},

	{"TestScanOverflow", _xtest.TestScanOverflow},

	{"TestNaN", _xtest.TestNaN},

	{"TestInf", _xtest.TestInf},

	{"TestScanfMulti", _xtest.TestScanfMulti},

	{"TestScanMultiple", _xtest.TestScanMultiple},

	{"TestScanEmpty", _xtest.TestScanEmpty},

	{"TestScanNotPointer", _xtest.TestScanNotPointer},

	{"TestScanlnNoNewline", _xtest.TestScanlnNoNewline},

	{"TestScanlnWithMiddleNewline", _xtest.TestScanlnWithMiddleNewline},

	{"TestEOF", _xtest.TestEOF},

	{"TestEOFAtEndOfInput", _xtest.TestEOFAtEndOfInput},

	{"TestEOFAllTypes", _xtest.TestEOFAllTypes},

	{"TestUnreadRuneWithBufio", _xtest.TestUnreadRuneWithBufio},

	{"TestMultiLine", _xtest.TestMultiLine},

	{"TestLineByLineFscanf", _xtest.TestLineByLineFscanf},

	{"TestScanStateCount", _xtest.TestScanStateCount},

	{"TestScanInts", _xtest.TestScanInts},

	{"TestHexBytes", _xtest.TestHexBytes},

	{"TestScanNewlinesAreSpaces", _xtest.TestScanNewlinesAreSpaces},

	{"TestScanlnNewlinesTerminate", _xtest.TestScanlnNewlinesTerminate},

	{"TestScanfNewlineMatchFormat", _xtest.TestScanfNewlineMatchFormat},

	{"TestHexByte", _xtest.TestHexByte},

	{"TestFormatString", _xtest.TestFormatString},

	{"TestStringer", _xtest.TestStringer},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkSprintfPadding", _xtest.BenchmarkSprintfPadding},

	{"BenchmarkSprintfEmpty", _xtest.BenchmarkSprintfEmpty},

	{"BenchmarkSprintfString", _xtest.BenchmarkSprintfString},

	{"BenchmarkSprintfTruncateString", _xtest.BenchmarkSprintfTruncateString},

	{"BenchmarkSprintfTruncateBytes", _xtest.BenchmarkSprintfTruncateBytes},

	{"BenchmarkSprintfSlowParsingPath", _xtest.BenchmarkSprintfSlowParsingPath},

	{"BenchmarkSprintfQuoteString", _xtest.BenchmarkSprintfQuoteString},

	{"BenchmarkSprintfInt", _xtest.BenchmarkSprintfInt},

	{"BenchmarkSprintfIntInt", _xtest.BenchmarkSprintfIntInt},

	{"BenchmarkSprintfPrefixedInt", _xtest.BenchmarkSprintfPrefixedInt},

	{"BenchmarkSprintfFloat", _xtest.BenchmarkSprintfFloat},

	{"BenchmarkSprintfComplex", _xtest.BenchmarkSprintfComplex},

	{"BenchmarkSprintfBoolean", _xtest.BenchmarkSprintfBoolean},

	{"BenchmarkSprintfHexString", _xtest.BenchmarkSprintfHexString},

	{"BenchmarkSprintfHexBytes", _xtest.BenchmarkSprintfHexBytes},

	{"BenchmarkSprintfBytes", _xtest.BenchmarkSprintfBytes},

	{"BenchmarkSprintfStringer", _xtest.BenchmarkSprintfStringer},

	{"BenchmarkSprintfStructure", _xtest.BenchmarkSprintfStructure},

	{"BenchmarkManyArgs", _xtest.BenchmarkManyArgs},

	{"BenchmarkFprintInt", _xtest.BenchmarkFprintInt},

	{"BenchmarkFprintfBytes", _xtest.BenchmarkFprintfBytes},

	{"BenchmarkFprintIntNoAlloc", _xtest.BenchmarkFprintIntNoAlloc},

	{"BenchmarkScanInts", _xtest.BenchmarkScanInts},

	{"BenchmarkScanRecursiveInt", _xtest.BenchmarkScanRecursiveInt},

	{"BenchmarkScanRecursiveIntReaderWrapper", _xtest.BenchmarkScanRecursiveIntReaderWrapper},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleErrorf", _xtest.ExampleErrorf, "user \"bueller\" (id 17) not found\n", false},

	{"ExampleFscanf", _xtest.ExampleFscanf, "5 true gophers\n3\n", false},

	{"ExampleFscanln", _xtest.ExampleFscanln, "3: dmr, 1771, 1.618034\n3: ken, 271828, 3.141590\n", false},

	{"ExampleSscanf", _xtest.ExampleSscanf, "2: Kim, 22\n", false},

	{"ExamplePrint", _xtest.ExamplePrint, "Kim is 22 years old.\n", false},

	{"ExamplePrintln", _xtest.ExamplePrintln, "Kim is 22 years old.\n", false},

	{"ExamplePrintf", _xtest.ExamplePrintf, "Kim is 22 years old.\n", false},

	{"ExampleSprint", _xtest.ExampleSprint, "Kim is 22 years old.\n", false},

	{"ExampleSprintln", _xtest.ExampleSprintln, "Kim is 22 years old.\n", false},

	{"ExampleSprintf", _xtest.ExampleSprintf, "Kim is 22 years old.\n", false},

	{"ExampleFprint", _xtest.ExampleFprint, "Kim is 22 years old.\n21 bytes written.\n", false},

	{"ExampleFprintln", _xtest.ExampleFprintln, "Kim is 22 years old.\n21 bytes written.\n", false},

	{"ExampleFprintf", _xtest.ExampleFprintf, "Kim is 22 years old.\n21 bytes written.\n", false},

	{"Example_printers", _xtest.Example_printers, "The vector (3 4) has length 5.\nThe vector ( 3 4 ) has length 5 .\nThe vector (3 4) has length 5.\n", false},

	{"Example_formats", _xtest.Example_formats, "23\n23\n23\nint *int\ntrue true\n42 42 2a 52 101010\n3.141592653589793 3.141592653589793 3.14 (  3.14) 3.141593e+00\n(110.7+22.5i) (110.7+22.5i) (110.70+22.50i) (1.11e+02+2.25e+01i)\n128512 128512 ðŸ˜€ 'ðŸ˜€' U+1F600 U+1F600 'ðŸ˜€'\nfoo \"bar\" foo \"bar\" \"foo \\\"bar\\\"\" `foo \"bar\"`\nmap[dachshund:false peanut:true] map[string]bool{\"dachshund\":false, \"peanut\":true}\n{Kim 22} {Name:Kim Age:22} struct { Name string; Age int }{Name:\"Kim\", Age:22}\n&{Kim 22} 0x0\n[Kitano Kobayashi Kurosawa Miyazaki Ozu] [\"Kitano\" \"Kobayashi\" \"Kurosawa\" \"Miyazaki\" \"Ozu\"]\n[Kitano Kobayashi Kurosawa] [\"Kitano\" \"Kobayashi\" \"Kurosawa\"] []string{\"Kitano\", \"Kobayashi\", \"Kurosawa\"}\n[97 226 140 152] [97 226 140 152] aâŒ˜ \"aâŒ˜\" 61e28c98 61 e2 8c 98\n1973-11-29 21:33:09 +0000 UTC \"1973-11-29 21:33:09 +0000 UTC\"\n", false},

	{"ExampleGoStringer", _xtest.ExampleGoStringer, "Person{Name: \"Warren\", Age: 31, Addr: &Address{City: \"Denver\", State: \"CO\", Country: \"U.S.A.\"}}\nPerson{Name: \"Theia\", Age: 4}\n", false},

	{"ExampleStringer", _xtest.ExampleStringer, "Gopher (2)\n", false},

}

func init() {
	testdeps.ImportPath = "fmt"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

