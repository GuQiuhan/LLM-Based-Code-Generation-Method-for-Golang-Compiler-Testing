//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
// Code generated by cmd/cgo; DO NOT EDIT.

package stdio

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_FILE = _Ctype_struct__IO_FILE

type _Ctype__GoBytes_ []byte

type _Ctype__GoString_ string

type _Ctype__IO_lock_t = _Ctype_void

type _Ctype___off64_t = _Ctype_long

type _Ctype___off_t = _Ctype_long

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_schar int8

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct__IO_FILE struct {
	_flags		_Ctype_int
	_IO_read_ptr	*_Ctype_char
	_IO_read_end	*_Ctype_char
	_IO_read_base	*_Ctype_char
	_IO_write_base	*_Ctype_char
	_IO_write_ptr	*_Ctype_char
	_IO_write_end	*_Ctype_char
	_IO_buf_base	*_Ctype_char
	_IO_buf_end	*_Ctype_char
	_IO_save_base	*_Ctype_char
	_IO_backup_base	*_Ctype_char
	_IO_save_end	*_Ctype_char
	_markers	*_Ctype_struct__IO_marker
	_chain		*_Ctype_struct__IO_FILE
	_fileno		_Ctype_int
	_flags2		_Ctype_int
	_old_offset	_Ctype___off_t
	_cur_column	_Ctype_ushort
	_vtable_offset	_Ctype_schar
	_shortbuf	[1]_Ctype_char
	_lock		unsafe.Pointer
	_offset		_Ctype___off64_t
	__pad1		unsafe.Pointer
	__pad2		unsafe.Pointer
	__pad3		unsafe.Pointer
	__pad4		unsafe.Pointer
	__pad5		_Ctype_size_t
	_mode		_Ctype_int
	_unused2	[20]_Ctype_char
}

type _Ctype_struct__IO_marker struct {
	_next	*_Ctype_struct__IO_marker
	_sbuf	*_Ctype_struct__IO_FILE
	_pos	_Ctype_int
	_	[4]byte
}

type _Ctype_ulong uint64

type _Ctype_ushort uint16

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_greeting greeting
//go:cgo_import_static greeting
var __cgo_greeting byte
var _Cvar_greeting **_Ctype_char = (**_Ctype_char)(unsafe.Pointer(&__cgo_greeting))


// CString converts the Go string s to a C string.
//
// The C string is allocated in the C heap using malloc.
// It is the caller's responsibility to arrange for it to be
// freed, such as by calling C.free (be sure to include stdlib.h
// if C.free is needed).
func _Cfunc_CString(s string) *_Ctype_char {
	if len(s)+1 <= 0 {
		panic("string too large")
	}
	p := _cgo_cmalloc(uint64(len(s)+1))
	sliceHeader := struct {
		p   unsafe.Pointer
		len int
		cap int
	}{p, len(s)+1, len(s)+1}
	b := *(*[]byte)(unsafe.Pointer(&sliceHeader))
	copy(b, s)
	b[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gobytes runtime.gobytes
func _cgo_runtime_gobytes(unsafe.Pointer, int) []byte

// GoBytes converts the C data p with explicit length l to a Go []byte.
func _Cfunc_GoBytes(p unsafe.Pointer, l _Ctype_int) []byte {
	return _cgo_runtime_gobytes(p, int(l))
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

// GoString converts the C string p into a Go string.
func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_869116931100_Cfunc_fflush
//go:linkname __cgofn__cgo_869116931100_Cfunc_fflush _cgo_869116931100_Cfunc_fflush
var __cgofn__cgo_869116931100_Cfunc_fflush byte
var _cgo_869116931100_Cfunc_fflush = unsafe.Pointer(&__cgofn__cgo_869116931100_Cfunc_fflush)

//go:cgo_unsafe_args
func _Cfunc_fflush(p0 *_Ctype_struct__IO_FILE) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_869116931100_Cfunc_fflush, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_869116931100_Cfunc_fputs
//go:linkname __cgofn__cgo_869116931100_Cfunc_fputs _cgo_869116931100_Cfunc_fputs
var __cgofn__cgo_869116931100_Cfunc_fputs byte
var _cgo_869116931100_Cfunc_fputs = unsafe.Pointer(&__cgofn__cgo_869116931100_Cfunc_fputs)

//go:cgo_unsafe_args
func _Cfunc_fputs(p0 *_Ctype_char, p1 *_Ctype_struct__IO_FILE) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_869116931100_Cfunc_fputs, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_869116931100_Cfunc_free
//go:linkname __cgofn__cgo_869116931100_Cfunc_free _cgo_869116931100_Cfunc_free
var __cgofn__cgo_869116931100_Cfunc_free byte
var _cgo_869116931100_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_869116931100_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_869116931100_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_869116931100_Cfunc_getStderr
//go:linkname __cgofn__cgo_869116931100_Cfunc_getStderr _cgo_869116931100_Cfunc_getStderr
var __cgofn__cgo_869116931100_Cfunc_getStderr byte
var _cgo_869116931100_Cfunc_getStderr = unsafe.Pointer(&__cgofn__cgo_869116931100_Cfunc_getStderr)

//go:cgo_unsafe_args
func _Cfunc_getStderr() (r1 *_Ctype_struct__IO_FILE) {
	_cgo_runtime_cgocall(_cgo_869116931100_Cfunc_getStderr, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_869116931100_Cfunc_getStdout
//go:linkname __cgofn__cgo_869116931100_Cfunc_getStdout _cgo_869116931100_Cfunc_getStdout
var __cgofn__cgo_869116931100_Cfunc_getStdout byte
var _cgo_869116931100_Cfunc_getStdout = unsafe.Pointer(&__cgofn__cgo_869116931100_Cfunc_getStdout)

//go:cgo_unsafe_args
func _Cfunc_getStdout() (r1 *_Ctype_struct__IO_FILE) {
	_cgo_runtime_cgocall(_cgo_869116931100_Cfunc_getStdout, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}

//go:cgo_import_static _cgo_869116931100_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_869116931100_Cfunc__Cmalloc _cgo_869116931100_Cfunc__Cmalloc
var __cgofn__cgo_869116931100_Cfunc__Cmalloc byte
var _cgo_869116931100_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_869116931100_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_869116931100_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
