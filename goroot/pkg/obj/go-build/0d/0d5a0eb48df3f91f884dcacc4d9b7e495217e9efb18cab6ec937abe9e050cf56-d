// Code generated by cmd/cgo; DO NOT EDIT.

//line /bigdata/qiuhan/codet5/usage/goroot/src/net/cgo_unix_cgo.go:1:1
// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build cgo && !netgo && unix && !darwin

package net

/*
#cgo CFLAGS: -fno-stack-protector
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

// If nothing else defined EAI_OVERFLOW, make sure it has a value.
#ifndef EAI_OVERFLOW
#define EAI_OVERFLOW -12
#endif
*/
import _ "unsafe"
import "unsafe"

const (
	_C_AF_INET      = ( /*line :28:20*/_Ciconst_AF_INET /*line :28:28*/)
	_C_AF_INET6     = ( /*line :29:20*/_Ciconst_AF_INET6 /*line :29:29*/)
	_C_AF_UNSPEC    = ( /*line :30:20*/_Ciconst_AF_UNSPEC /*line :30:30*/)
	_C_EAI_AGAIN    = ( /*line :31:20*/_Ciconst_EAI_AGAIN /*line :31:30*/)
	_C_EAI_NONAME   = ( /*line :32:20*/_Ciconst_EAI_NONAME /*line :32:31*/)
	_C_EAI_OVERFLOW = ( /*line :33:20*/_Ciconst_EAI_OVERFLOW /*line :33:33*/)
	_C_EAI_SYSTEM   = ( /*line :34:20*/_Ciconst_EAI_SYSTEM /*line :34:31*/)
	_C_IPPROTO_TCP  = ( /*line :35:20*/_Ciconst_IPPROTO_TCP /*line :35:32*/)
	_C_IPPROTO_UDP  = ( /*line :36:20*/_Ciconst_IPPROTO_UDP /*line :36:32*/)
	_C_SOCK_DGRAM   = ( /*line :37:20*/_Ciconst_SOCK_DGRAM /*line :37:31*/)
	_C_SOCK_STREAM  = ( /*line :38:20*/_Ciconst_SOCK_STREAM /*line :38:32*/)
)

type (
	_C_char            =  /*line :42:23*/_Ctype_char /*line :42:29*/
	_C_uchar           =  /*line :43:23*/_Ctype_uchar /*line :43:30*/
	_C_int             =  /*line :44:23*/_Ctype_int /*line :44:28*/
	_C_uint            =  /*line :45:23*/_Ctype_uint /*line :45:29*/
	_C_socklen_t       =  /*line :46:23*/_Ctype_socklen_t /*line :46:34*/
	_C_struct_addrinfo =  /*line :47:23*/_Ctype_struct_addrinfo /*line :47:40*/
	_C_struct_sockaddr =  /*line :48:23*/_Ctype_struct_sockaddr /*line :48:40*/
)

func _C_GoString(p *_C_char) string      { return ( /*line :51:51*/_Cfunc_GoString /*line :51:60*/)(p) }
func _C_CString(s string) *_C_char       { return ( /*line :52:51*/_Cfunc_CString /*line :52:59*/)(s) }
func _C_FreeCString(p *_C_char)          { func() { _cgo0 := /*line :53:51*/unsafe.Pointer(p); _cgoCheckPointer(_cgo0, nil); /*line :53:69*/_Cfunc_free(_cgo0); }() }
func _C_malloc(n uintptr) unsafe.Pointer { return ( /*line :54:51*/_Cfunc__CMalloc /*line :54:58*/)( /*line :54:60*/_Ctype_size_t /*line :54:68*/(n)) }
func _C_free(p unsafe.Pointer)           { func() { _cgo0 := /*line :55:51*/p; _cgoCheckPointer(_cgo0, nil); /*line :55:53*/_Cfunc_free(_cgo0); }() }

func _C_ai_addr(ai *_C_struct_addrinfo) **_C_struct_sockaddr { return &ai.ai_addr }
func _C_ai_canonname(ai *_C_struct_addrinfo) **_C_char       { return &ai.ai_canonname }
func _C_ai_family(ai *_C_struct_addrinfo) *_C_int            { return &ai.ai_family }
func _C_ai_flags(ai *_C_struct_addrinfo) *_C_int             { return &ai.ai_flags }
func _C_ai_next(ai *_C_struct_addrinfo) **_C_struct_addrinfo { return &ai.ai_next }
func _C_ai_protocol(ai *_C_struct_addrinfo) *_C_int          { return &ai.ai_protocol }
func _C_ai_socktype(ai *_C_struct_addrinfo) *_C_int          { return &ai.ai_socktype }

func _C_freeaddrinfo(ai *_C_struct_addrinfo) {
	func() { _cgo0 := /*line :66:17*/ai; _cgoCheckPointer(_cgo0, nil); /*line :66:20*/_Cfunc_freeaddrinfo(_cgo0); }()
}

func _C_gai_strerror(eai _C_int) string {
	return ( /*line :70:9*/_Cfunc_GoString /*line :70:18*/)(( /*line :70:20*/_Cfunc_gai_strerror /*line :70:33*/)(eai))
}

func _C_getaddrinfo(hostname, servname *_C_char, hints *_C_struct_addrinfo, res **_C_struct_addrinfo) (int, error) {
	x, err := func() (_Ctype_int, error){ var _cgo0 *_Ctype_char = /*line :74:26*/hostname; var _cgo1 *_Ctype_char = /*line :74:36*/servname; _cgo2 := /*line :74:46*/hints; _cgo3 := /*line :74:53*/res; _cgoCheckPointer(_cgo2, nil); _cgoCheckPointer(_cgo3, nil); return /*line :74:57*/_C2func_getaddrinfo(_cgo0, _cgo1, _cgo2, _cgo3); }()
	return int(x), err
}
