//line /tmp/go-build3870121342/b001/_testmain.go:1:1

// Code generated by 'go test'. DO NOT EDIT.

package main; import _ "runtime/coverage"

import (
	"os"

	_ "unsafe"


	"testing"
	"testing/internal/testdeps"


	_test "cmd/cover/testdata/html"


)

var tests = []testing.InternalTest{

	{"TestAll", _test.TestAll},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "cmd/cover/testdata/html"
}



//go:linkname runtime_coverage_processCoverTestDir runtime/coverage.processCoverTestDir
func runtime_coverage_processCoverTestDir(dir string, cfile string, cmode string, cpkgs string) error

//go:linkname testing_registerCover2 testing.registerCover2
func testing_registerCover2(mode string, tearDown func(coverprofile string, gocoverdir string) (string, error))

//go:linkname runtime_coverage_markProfileEmitted runtime/coverage.markProfileEmitted
func runtime_coverage_markProfileEmitted(val bool)

func coverTearDown(coverprofile string, gocoverdir string) (string, error) {
	var err error
	if gocoverdir == "" {
		gocoverdir, err = os.MkdirTemp("", "gocoverdir")
		if err != nil {
			return "error setting GOCOVERDIR: bad os.MkdirTemp return", err
		}
		defer os.RemoveAll(gocoverdir)
	}
	runtime_coverage_markProfileEmitted(true)
	cmode := "set"
	if err := runtime_coverage_processCoverTestDir(gocoverdir, coverprofile, cmode, ""); err != nil {
		return "error generating coverage report", err
	}
	return "", nil
}


func main() {

	testing_registerCover2("set", coverTearDown)

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}


var goCover_17fa49c75b46_P uint32
var goCover_17fa49c75b46_M = [...]byte{
 0x50, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1,
 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8,
 0x57, 0xdb, 0x24, 0x21, 0x15, 0xc, 0x36, 0xd,
 0xb7, 0x60, 0x2c, 0x97, 0x73, 0xfc, 0xcc, 0x0,
 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0,
 0x0, 0x0, 0x0, 0x3, 0x0, 0x1c, 0x63, 0x6d,
 0x64, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f,
 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2e, 0x74, 0x65,
 0x73, 0x74, 0x4, 0x6d, 0x61, 0x69, 0x6e,}
