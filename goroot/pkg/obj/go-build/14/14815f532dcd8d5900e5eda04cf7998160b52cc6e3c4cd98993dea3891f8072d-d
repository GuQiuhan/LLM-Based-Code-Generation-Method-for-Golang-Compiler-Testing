//go:cgo_ldflag "-fsanitize=thread"
//go:cgo_ldflag "-fPIC"
//go:cgo_ldflag "-static-libtsan"
//go:cgo_ldflag "-fsanitize=thread"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_char int8

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_0d99e41cc5ca_Cfunc_f
//go:linkname __cgofn__cgo_0d99e41cc5ca_Cfunc_f _cgo_0d99e41cc5ca_Cfunc_f
var __cgofn__cgo_0d99e41cc5ca_Cfunc_f byte
var _cgo_0d99e41cc5ca_Cfunc_f = unsafe.Pointer(&__cgofn__cgo_0d99e41cc5ca_Cfunc_f)

//go:cgo_unsafe_args
func _Cfunc_f(p0 *_Ctype_char) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_0d99e41cc5ca_Cfunc_f, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
