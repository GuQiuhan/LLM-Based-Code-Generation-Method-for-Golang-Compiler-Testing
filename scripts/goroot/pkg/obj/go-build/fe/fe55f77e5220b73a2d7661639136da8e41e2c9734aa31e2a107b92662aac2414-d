//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_FILE = _Ctype_struct__IO_FILE

type _Ctype__IO_lock_t = _Ctype_void

type _Ctype___off64_t = _Ctype_long

type _Ctype___off_t = _Ctype_long

type _Ctype_bar_t = _Ctype_struct_bar

type _Ctype_char int8

type _Ctype_complexdouble complex128

type _Ctype_complexfloat complex64

type _Ctype_foo_t = _Ctype_struct_foo

type _Ctype_int int32

type _Ctype_long int64

type _Ctype_longlong int64

type _Ctype_schar int8

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct__IO_FILE struct {
	_flags		_Ctype_int
	_IO_read_ptr	*_Ctype_char
	_IO_read_end	*_Ctype_char
	_IO_read_base	*_Ctype_char
	_IO_write_base	*_Ctype_char
	_IO_write_ptr	*_Ctype_char
	_IO_write_end	*_Ctype_char
	_IO_buf_base	*_Ctype_char
	_IO_buf_end	*_Ctype_char
	_IO_save_base	*_Ctype_char
	_IO_backup_base	*_Ctype_char
	_IO_save_end	*_Ctype_char
	_markers	*_Ctype_struct__IO_marker
	_chain		*_Ctype_struct__IO_FILE
	_fileno		_Ctype_int
	_flags2		_Ctype_int
	_old_offset	_Ctype___off_t
	_cur_column	_Ctype_ushort
	_vtable_offset	_Ctype_schar
	_shortbuf	[1]_Ctype_char
	_lock		unsafe.Pointer
	_offset		_Ctype___off64_t
	__pad1		unsafe.Pointer
	__pad2		unsafe.Pointer
	__pad3		unsafe.Pointer
	__pad4		unsafe.Pointer
	__pad5		_Ctype_size_t
	_mode		_Ctype_int
	_unused2	[20]_Ctype_char
}

type _Ctype_struct__IO_marker struct {
	_next	*_Ctype_struct__IO_marker
	_sbuf	*_Ctype_struct__IO_FILE
	_pos	_Ctype_int
	_	[4]byte
}

type _Ctype_struct_bar _cgopackage.Incomplete

type _Ctype_struct_foo _cgopackage.Incomplete

type _Ctype_uchar uint8

type _Ctype_uint uint32

type _Ctype_ulong uint64

type _Ctype_ulonglong uint64

type _Ctype_ushort uint16

type _Ctype_v = _Ctype_void

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_foop foop
//go:cgo_import_static foop
var __cgo_foop byte
var _Cvar_foop **_Ctype_struct_foo = (**_Ctype_struct_foo)(unsafe.Pointer(&__cgo_foop))
//go:linkname __cgo_fi fi
//go:cgo_import_static fi
var __cgo_fi byte
var _Cfpvar_fp_fi unsafe.Pointer = (unsafe.Pointer)(unsafe.Pointer(&__cgo_fi))
//go:linkname __cgo_i i
//go:cgo_import_static i
var __cgo_i byte
var _Cvar_i *_Ctype_int = (*_Ctype_int)(unsafe.Pointer(&__cgo_i))

//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_F
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_F _cgo_3ca078d39abe_Cfunc_F
var __cgofn__cgo_3ca078d39abe_Cfunc_F byte
var _cgo_3ca078d39abe_Cfunc_F = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_F)

//go:cgo_unsafe_args
func _Cfunc_F(p0 *unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_F, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

func _Cfunc__CMalloc(n _Ctype_size_t) unsafe.Pointer {
	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fi
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fi _cgo_3ca078d39abe_Cfunc_fi
var __cgofn__cgo_3ca078d39abe_Cfunc_fi byte
var _cgo_3ca078d39abe_Cfunc_fi = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fi)

//go:cgo_unsafe_args
func _Cfunc_fi(p0 _Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fi, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fopen
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fopen _cgo_3ca078d39abe_Cfunc_fopen
var __cgofn__cgo_3ca078d39abe_Cfunc_fopen byte
var _cgo_3ca078d39abe_Cfunc_fopen = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fopen)

//go:cgo_unsafe_args
func _Cfunc_fopen(p0 *_Ctype_char, p1 *_Ctype_char) (r1 *_Ctype_struct__IO_FILE) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fopen, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fppi
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fppi _cgo_3ca078d39abe_Cfunc_fppi
var __cgofn__cgo_3ca078d39abe_Cfunc_fppi byte
var _cgo_3ca078d39abe_Cfunc_fppi = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fppi)

//go:cgo_unsafe_args
func _Cfunc_fppi(p0 **_Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fppi, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fvi
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fvi _cgo_3ca078d39abe_Cfunc_fvi
var __cgofn__cgo_3ca078d39abe_Cfunc_fvi byte
var _cgo_3ca078d39abe_Cfunc_fvi = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fvi)

//go:cgo_unsafe_args
func _Cfunc_fvi(p0 unsafe.Pointer, p1 _Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fvi, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_transform
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_transform _cgo_3ca078d39abe_Cfunc_transform
var __cgofn__cgo_3ca078d39abe_Cfunc_transform byte
var _cgo_3ca078d39abe_Cfunc_transform = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_transform)

//go:cgo_unsafe_args
func _Cfunc_transform(p0 _Ctype_int) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_transform, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

//go:cgo_import_static _cgo_3ca078d39abe_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc__Cmalloc _cgo_3ca078d39abe_Cfunc__Cmalloc
var __cgofn__cgo_3ca078d39abe_Cfunc__Cmalloc byte
var _cgo_3ca078d39abe_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
