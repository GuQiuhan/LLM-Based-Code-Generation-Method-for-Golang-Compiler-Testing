//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
// Code generated by cmd/cgo; DO NOT EDIT.

package mylib

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_int int32

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_cgodata cgodata
//go:cgo_import_static cgodata
var __cgo_cgodata byte
var _Cvar_cgodata *_Ctype_int = (*_Ctype_int)(unsafe.Pointer(&__cgo_cgodata))

//go:cgo_import_static _cgo_fc6f9afb4263_Cfunc_cgofunc
//go:linkname __cgofn__cgo_fc6f9afb4263_Cfunc_cgofunc _cgo_fc6f9afb4263_Cfunc_cgofunc
var __cgofn__cgo_fc6f9afb4263_Cfunc_cgofunc byte
var _cgo_fc6f9afb4263_Cfunc_cgofunc = unsafe.Pointer(&__cgofn__cgo_fc6f9afb4263_Cfunc_cgofunc)

//go:cgo_unsafe_args
func _Cfunc_cgofunc() (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_fc6f9afb4263_Cfunc_cgofunc, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
