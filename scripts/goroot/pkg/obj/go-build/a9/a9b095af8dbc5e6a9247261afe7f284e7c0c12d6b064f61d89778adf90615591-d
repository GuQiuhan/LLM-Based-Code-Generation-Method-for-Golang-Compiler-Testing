//line /tmp/cmd-go-test-211347988/go-build724292416/b001/_testmain.go:1:1

// Code generated by 'go test'. DO NOT EDIT.

package main; import _ "runtime/coverage"

import (
	"os"

	_ "unsafe"


	"testing"
	"testing/internal/testdeps"


	_test "log"


	_xtest "log_test"

)

var tests = []testing.InternalTest{

	{"TestDefault", _test.TestDefault},

	{"TestAll", _test.TestAll},

	{"TestOutput", _test.TestOutput},

	{"TestOutputRace", _test.TestOutputRace},

	{"TestFlagAndPrefixSetting", _test.TestFlagAndPrefixSetting},

	{"TestUTCFlag", _test.TestUTCFlag},

	{"TestEmptyPrintCreatesLine", _test.TestEmptyPrintCreatesLine},

	{"TestDiscard", _test.TestDiscard},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkItoa", _test.BenchmarkItoa},

	{"BenchmarkPrintln", _test.BenchmarkPrintln},

	{"BenchmarkPrintlnNoFlags", _test.BenchmarkPrintlnNoFlags},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleLogger", _xtest.ExampleLogger, "logger: example_test.go:19: Hello, log file!\n", false},

	{"ExampleLogger_Output", _xtest.ExampleLogger_Output, "INFO: example_test.go:36: Hello world\n", false},

}

func init() {
	testdeps.ImportPath = "log"
}



//go:linkname runtime_coverage_processCoverTestDir runtime/coverage.processCoverTestDir
func runtime_coverage_processCoverTestDir(dir string, cfile string, cmode string, cpkgs string) error

//go:linkname testing_registerCover2 testing.registerCover2
func testing_registerCover2(mode string, tearDown func(coverprofile string, gocoverdir string) (string, error))

//go:linkname runtime_coverage_markProfileEmitted runtime/coverage.markProfileEmitted
func runtime_coverage_markProfileEmitted(val bool)

func coverTearDown(coverprofile string, gocoverdir string) (string, error) {
	var err error
	if gocoverdir == "" {
		gocoverdir, err = os.MkdirTemp("", "gocoverdir")
		if err != nil {
			return "error setting GOCOVERDIR: bad os.MkdirTemp return", err
		}
		defer os.RemoveAll(gocoverdir)
	}
	runtime_coverage_markProfileEmitted(true)
	cmode := "set"
	if err := runtime_coverage_processCoverTestDir(gocoverdir, coverprofile, cmode, ""); err != nil {
		return "error generating coverage report", err
	}
	return "", nil
}


func main() {

	testing_registerCover2("set", coverTearDown)

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}


var goCover_2b2d8a6acb95_P uint32
var goCover_2b2d8a6acb95_M = [...]byte{
 0x3c, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1,
 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38,
 0xb6, 0xc5, 0x52, 0x4, 0x4a, 0xc, 0xda, 0x2c,
 0x92, 0xf4, 0xcd, 0x2a, 0xf2, 0xab, 0x34, 0x0,
 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0,
 0x0, 0x0, 0x0, 0x3, 0x0, 0x8, 0x6c, 0x6f,
 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x4, 0x6d,
 0x61, 0x69, 0x6e,}
