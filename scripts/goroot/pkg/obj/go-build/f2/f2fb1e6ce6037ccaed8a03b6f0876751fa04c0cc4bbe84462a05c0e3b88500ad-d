//line /bigdata/qiuhan/codet5/usage/goroot/src/log/log.go:1:1
// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package log implements a simple logging package. It defines a type, Logger,
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// Every log message is output on a separate line: if the message being
// printed does not end in a newline, the logger will add one.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.
package log

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"sync/atomic"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// With the exception of the Lmsgprefix flag, there is no
// control over the order they appear (the order listed here)
// or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//
//	2009/01/23 01:23:23 message
//
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	Lmsgprefix                    // move the "prefix" from the beginning of the line to before the message
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu        sync.Mutex  // ensures atomic writes; protects the following fields
	prefix    string      // prefix on each line to identify the logger (but see Lmsgprefix)
	flag      int         // properties
	out       io.Writer   // destination for output
	buf       []byte      // for accumulating text to write
	isDiscard atomic.Bool // whether out == io.Discard
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line, or
// after the log header if the Lmsgprefix flag is provided.
// The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger {goCover_836ff184e7b4__0[0] = 3 ; goCover_836ff184e7b4__0[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__0[2] = 0 ; goCover_836ff184e7b4__0[3] = 1;
	l := &Logger{out: out, prefix: prefix, flag: flag}
	if out == io.Discard {goCover_836ff184e7b4__0[5] = 1;
		l.isDiscard.Store(true)
	}
	goCover_836ff184e7b4__0[4] = 1;return l
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {goCover_836ff184e7b4__1[0] = 1 ; goCover_836ff184e7b4__1[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__1[2] = 1 ; goCover_836ff184e7b4__1[3] = 1;
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
	l.isDiscard.Store(w == io.Discard)
}

var std = New(os.Stderr, "", LstdFlags)

// Default returns the standard logger used by the package-level output functions.
func Default() *Logger {goCover_836ff184e7b4__2[0] = 1 ; goCover_836ff184e7b4__2[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__2[2] = 2 ; goCover_836ff184e7b4__2[3] = 1; return std }

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {goCover_836ff184e7b4__3[0] = 3 ; goCover_836ff184e7b4__3[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__3[2] = 3 ; goCover_836ff184e7b4__3[3] = 1;
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {goCover_836ff184e7b4__3[5] = 1;
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	goCover_836ff184e7b4__3[4] = 1;b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   - l.prefix (if it's not blank and Lmsgprefix is unset),
//   - date and/or time (if corresponding flags are provided),
//   - file and line number (if corresponding flags are provided),
//   - l.prefix (if it's not blank and Lmsgprefix is set).
func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {goCover_836ff184e7b4__4[0] = 20 ; goCover_836ff184e7b4__4[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__4[2] = 4 ; goCover_836ff184e7b4__4[3] = 1;
	if l.flag&Lmsgprefix == 0 {goCover_836ff184e7b4__4[7] = 1;
		*buf = append(*buf, l.prefix...)
	}
	goCover_836ff184e7b4__4[4] = 1;if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {goCover_836ff184e7b4__4[8] = 1;
		if l.flag&LUTC != 0 {goCover_836ff184e7b4__4[11] = 1;
			t = t.UTC()
		}
		goCover_836ff184e7b4__4[9] = 1;if l.flag&Ldate != 0 {goCover_836ff184e7b4__4[12] = 1;
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		goCover_836ff184e7b4__4[10] = 1;if l.flag&(Ltime|Lmicroseconds) != 0 {goCover_836ff184e7b4__4[13] = 1;
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {goCover_836ff184e7b4__4[15] = 1;
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			goCover_836ff184e7b4__4[14] = 1;*buf = append(*buf, ' ')
		}
	}
	goCover_836ff184e7b4__4[5] = 1;if l.flag&(Lshortfile|Llongfile) != 0 {goCover_836ff184e7b4__4[16] = 1;
		if l.flag&Lshortfile != 0 {goCover_836ff184e7b4__4[18] = 1;
			short := file
			for i := len(file) - 1; i > 0; i-- {goCover_836ff184e7b4__4[20] = 1;
				if file[i] == '/' {goCover_836ff184e7b4__4[21] = 1;
					short = file[i+1:]
					break
				}
			}
			goCover_836ff184e7b4__4[19] = 1;file = short
		}
		goCover_836ff184e7b4__4[17] = 1;*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
	goCover_836ff184e7b4__4[6] = 1;if l.flag&Lmsgprefix != 0 {goCover_836ff184e7b4__4[22] = 1;
		*buf = append(*buf, l.prefix...)
	}
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, s string) error {goCover_836ff184e7b4__5[0] = 7 ; goCover_836ff184e7b4__5[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__5[2] = 5 ; goCover_836ff184e7b4__5[3] = 1;
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {goCover_836ff184e7b4__5[6] = 1;
		// Release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {goCover_836ff184e7b4__5[8] = 1;
			file = "???"
			line = 0
		}
		goCover_836ff184e7b4__5[7] = 1;l.mu.Lock()
	}
	goCover_836ff184e7b4__5[4] = 1;l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {goCover_836ff184e7b4__5[9] = 1;
		l.buf = append(l.buf, '\n')
	}
	goCover_836ff184e7b4__5[5] = 1;_, err := l.out.Write(l.buf)
	return err
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...any) {goCover_836ff184e7b4__6[0] = 3 ; goCover_836ff184e7b4__6[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__6[2] = 6 ; goCover_836ff184e7b4__6[3] = 1;
	if l.isDiscard.Load() {goCover_836ff184e7b4__6[5] = 1;
		return
	}
	goCover_836ff184e7b4__6[4] = 1;l.Output(2, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Print(v ...any) {goCover_836ff184e7b4__7[0] = 3 ; goCover_836ff184e7b4__7[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__7[2] = 7 ; goCover_836ff184e7b4__7[3] = 1;
	if l.isDiscard.Load() {goCover_836ff184e7b4__7[5] = 1;
		return
	}
	goCover_836ff184e7b4__7[4] = 1;l.Output(2, fmt.Sprint(v...))
}

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Println(v ...any) {goCover_836ff184e7b4__8[0] = 3 ; goCover_836ff184e7b4__8[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__8[2] = 8 ; goCover_836ff184e7b4__8[3] = 1;
	if l.isDiscard.Load() {goCover_836ff184e7b4__8[5] = 1;
		return
	}
	goCover_836ff184e7b4__8[4] = 1;l.Output(2, fmt.Sprintln(v...))
}

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...any) {goCover_836ff184e7b4__9[0] = 1 ; goCover_836ff184e7b4__9[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__9[2] = 9 ; goCover_836ff184e7b4__9[3] = 1;
	l.Output(2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...any) {goCover_836ff184e7b4__10[0] = 1 ; goCover_836ff184e7b4__10[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__10[2] = 10 ; goCover_836ff184e7b4__10[3] = 1;
	l.Output(2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...any) {goCover_836ff184e7b4__11[0] = 1 ; goCover_836ff184e7b4__11[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__11[2] = 11 ; goCover_836ff184e7b4__11[3] = 1;
	l.Output(2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...any) {goCover_836ff184e7b4__12[0] = 1 ; goCover_836ff184e7b4__12[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__12[2] = 12 ; goCover_836ff184e7b4__12[3] = 1;
	s := fmt.Sprint(v...)
	l.Output(2, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...any) {goCover_836ff184e7b4__13[0] = 1 ; goCover_836ff184e7b4__13[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__13[2] = 13 ; goCover_836ff184e7b4__13[3] = 1;
	s := fmt.Sprintf(format, v...)
	l.Output(2, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...any) {goCover_836ff184e7b4__14[0] = 1 ; goCover_836ff184e7b4__14[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__14[2] = 14 ; goCover_836ff184e7b4__14[3] = 1;
	s := fmt.Sprintln(v...)
	l.Output(2, s)
	panic(s)
}

// Flags returns the output flags for the logger.
// The flag bits are Ldate, Ltime, and so on.
func (l *Logger) Flags() int {goCover_836ff184e7b4__15[0] = 1 ; goCover_836ff184e7b4__15[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__15[2] = 15 ; goCover_836ff184e7b4__15[3] = 1;
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
// The flag bits are Ldate, Ltime, and so on.
func (l *Logger) SetFlags(flag int) {goCover_836ff184e7b4__16[0] = 1 ; goCover_836ff184e7b4__16[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__16[2] = 16 ; goCover_836ff184e7b4__16[3] = 1;
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {goCover_836ff184e7b4__17[0] = 1 ; goCover_836ff184e7b4__17[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__17[2] = 17 ; goCover_836ff184e7b4__17[3] = 1;
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {goCover_836ff184e7b4__18[0] = 1 ; goCover_836ff184e7b4__18[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__18[2] = 18 ; goCover_836ff184e7b4__18[3] = 1;
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {goCover_836ff184e7b4__19[0] = 1 ; goCover_836ff184e7b4__19[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__19[2] = 19 ; goCover_836ff184e7b4__19[3] = 1;
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out
}

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer) {goCover_836ff184e7b4__20[0] = 1 ; goCover_836ff184e7b4__20[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__20[2] = 20 ; goCover_836ff184e7b4__20[3] = 1;
	std.SetOutput(w)
}

// Flags returns the output flags for the standard logger.
// The flag bits are Ldate, Ltime, and so on.
func Flags() int {goCover_836ff184e7b4__21[0] = 1 ; goCover_836ff184e7b4__21[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__21[2] = 21 ; goCover_836ff184e7b4__21[3] = 1;
	return std.Flags()
}

// SetFlags sets the output flags for the standard logger.
// The flag bits are Ldate, Ltime, and so on.
func SetFlags(flag int) {goCover_836ff184e7b4__22[0] = 1 ; goCover_836ff184e7b4__22[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__22[2] = 22 ; goCover_836ff184e7b4__22[3] = 1;
	std.SetFlags(flag)
}

// Prefix returns the output prefix for the standard logger.
func Prefix() string {goCover_836ff184e7b4__23[0] = 1 ; goCover_836ff184e7b4__23[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__23[2] = 23 ; goCover_836ff184e7b4__23[3] = 1;
	return std.Prefix()
}

// SetPrefix sets the output prefix for the standard logger.
func SetPrefix(prefix string) {goCover_836ff184e7b4__24[0] = 1 ; goCover_836ff184e7b4__24[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__24[2] = 24 ; goCover_836ff184e7b4__24[3] = 1;
	std.SetPrefix(prefix)
}

// Writer returns the output destination for the standard logger.
func Writer() io.Writer {goCover_836ff184e7b4__25[0] = 1 ; goCover_836ff184e7b4__25[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__25[2] = 25 ; goCover_836ff184e7b4__25[3] = 1;
	return std.Writer()
}

// These functions write to the standard logger.

// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Print.
func Print(v ...any) {goCover_836ff184e7b4__26[0] = 3 ; goCover_836ff184e7b4__26[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__26[2] = 26 ; goCover_836ff184e7b4__26[3] = 1;
	if std.isDiscard.Load() {goCover_836ff184e7b4__26[5] = 1;
		return
	}
	goCover_836ff184e7b4__26[4] = 1;std.Output(2, fmt.Sprint(v...))
}

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Printf(format string, v ...any) {goCover_836ff184e7b4__27[0] = 3 ; goCover_836ff184e7b4__27[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__27[2] = 27 ; goCover_836ff184e7b4__27[3] = 1;
	if std.isDiscard.Load() {goCover_836ff184e7b4__27[5] = 1;
		return
	}
	goCover_836ff184e7b4__27[4] = 1;std.Output(2, fmt.Sprintf(format, v...))
}

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Println.
func Println(v ...any) {goCover_836ff184e7b4__28[0] = 3 ; goCover_836ff184e7b4__28[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__28[2] = 28 ; goCover_836ff184e7b4__28[3] = 1;
	if std.isDiscard.Load() {goCover_836ff184e7b4__28[5] = 1;
		return
	}
	goCover_836ff184e7b4__28[4] = 1;std.Output(2, fmt.Sprintln(v...))
}

// Fatal is equivalent to Print() followed by a call to os.Exit(1).
func Fatal(v ...any) {goCover_836ff184e7b4__29[0] = 1 ; goCover_836ff184e7b4__29[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__29[2] = 29 ; goCover_836ff184e7b4__29[3] = 1;
	std.Output(2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).
func Fatalf(format string, v ...any) {goCover_836ff184e7b4__30[0] = 1 ; goCover_836ff184e7b4__30[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__30[2] = 30 ; goCover_836ff184e7b4__30[3] = 1;
	std.Output(2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).
func Fatalln(v ...any) {goCover_836ff184e7b4__31[0] = 1 ; goCover_836ff184e7b4__31[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__31[2] = 31 ; goCover_836ff184e7b4__31[3] = 1;
	std.Output(2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to Print() followed by a call to panic().
func Panic(v ...any) {goCover_836ff184e7b4__32[0] = 1 ; goCover_836ff184e7b4__32[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__32[2] = 32 ; goCover_836ff184e7b4__32[3] = 1;
	s := fmt.Sprint(v...)
	std.Output(2, s)
	panic(s)
}

// Panicf is equivalent to Printf() followed by a call to panic().
func Panicf(format string, v ...any) {goCover_836ff184e7b4__33[0] = 1 ; goCover_836ff184e7b4__33[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__33[2] = 33 ; goCover_836ff184e7b4__33[3] = 1;
	s := fmt.Sprintf(format, v...)
	std.Output(2, s)
	panic(s)
}

// Panicln is equivalent to Println() followed by a call to panic().
func Panicln(v ...any) {goCover_836ff184e7b4__34[0] = 1 ; goCover_836ff184e7b4__34[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__34[2] = 34 ; goCover_836ff184e7b4__34[3] = 1;
	s := fmt.Sprintln(v...)
	std.Output(2, s)
	panic(s)
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.
func Output(calldepth int, s string) error {goCover_836ff184e7b4__35[0] = 1 ; goCover_836ff184e7b4__35[1] = goCover_836ff184e7b4_P ; goCover_836ff184e7b4__35[2] = 35 ; goCover_836ff184e7b4__35[3] = 1;
	return std.Output(calldepth+1, s) // +1 for this frame.
}

var goCover_836ff184e7b4_P uint32
var goCover_836ff184e7b4__0 [6]uint32
var goCover_836ff184e7b4__1 [4]uint32
var goCover_836ff184e7b4__2 [4]uint32
var goCover_836ff184e7b4__3 [6]uint32
var goCover_836ff184e7b4__4 [23]uint32
var goCover_836ff184e7b4__5 [10]uint32
var goCover_836ff184e7b4__6 [6]uint32
var goCover_836ff184e7b4__7 [6]uint32
var goCover_836ff184e7b4__8 [6]uint32
var goCover_836ff184e7b4__9 [4]uint32
var goCover_836ff184e7b4__10 [4]uint32
var goCover_836ff184e7b4__11 [4]uint32
var goCover_836ff184e7b4__12 [4]uint32
var goCover_836ff184e7b4__13 [4]uint32
var goCover_836ff184e7b4__14 [4]uint32
var goCover_836ff184e7b4__15 [4]uint32
var goCover_836ff184e7b4__16 [4]uint32
var goCover_836ff184e7b4__17 [4]uint32
var goCover_836ff184e7b4__18 [4]uint32
var goCover_836ff184e7b4__19 [4]uint32
var goCover_836ff184e7b4__20 [4]uint32
var goCover_836ff184e7b4__21 [4]uint32
var goCover_836ff184e7b4__22 [4]uint32
var goCover_836ff184e7b4__23 [4]uint32
var goCover_836ff184e7b4__24 [4]uint32
var goCover_836ff184e7b4__25 [4]uint32
var goCover_836ff184e7b4__26 [6]uint32
var goCover_836ff184e7b4__27 [6]uint32
var goCover_836ff184e7b4__28 [6]uint32
var goCover_836ff184e7b4__29 [4]uint32
var goCover_836ff184e7b4__30 [4]uint32
var goCover_836ff184e7b4__31 [4]uint32
var goCover_836ff184e7b4__32 [4]uint32
var goCover_836ff184e7b4__33 [4]uint32
var goCover_836ff184e7b4__34 [4]uint32
var goCover_836ff184e7b4__35 [4]uint32
var goCover_836ff184e7b4_M = [...]byte{
 0xef, 0x4, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1,
 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4b,
 0xf5, 0x4c, 0xef, 0xb0, 0xfc, 0x35, 0x2c, 0x5,
 0x6e, 0x73, 0x7f, 0xd5, 0x49, 0xeb, 0x44, 0x0,
 0x0, 0x0, 0x0, 0x27, 0x0, 0x0, 0x0, 0x24,
 0x0, 0x0, 0x0, 0x61, 0x2, 0x0, 0x0, 0x74,
 0x2, 0x0, 0x0, 0x7d, 0x2, 0x0, 0x0, 0x86,
 0x2, 0x0, 0x0, 0x99, 0x2, 0x0, 0x0, 0x1c,
 0x3, 0x0, 0x0, 0x51, 0x3, 0x0, 0x0, 0x6a,
 0x3, 0x0, 0x0, 0x83, 0x3, 0x0, 0x0, 0x9c,
 0x3, 0x0, 0x0, 0xa7, 0x3, 0x0, 0x0, 0xb2,
 0x3, 0x0, 0x0, 0xbd, 0x3, 0x0, 0x0, 0xc8,
 0x3, 0x0, 0x0, 0xd3, 0x3, 0x0, 0x0, 0xde,
 0x3, 0x0, 0x0, 0xe9, 0x3, 0x0, 0x0, 0xf4,
 0x3, 0x0, 0x0, 0xff, 0x3, 0x0, 0x0, 0xa,
 0x4, 0x0, 0x0, 0x15, 0x4, 0x0, 0x0, 0x20,
 0x4, 0x0, 0x0, 0x2b, 0x4, 0x0, 0x0, 0x36,
 0x4, 0x0, 0x0, 0x41, 0x4, 0x0, 0x0, 0x4c,
 0x4, 0x0, 0x0, 0x57, 0x4, 0x0, 0x0, 0x70,
 0x4, 0x0, 0x0, 0x89, 0x4, 0x0, 0x0, 0xa2,
 0x4, 0x0, 0x0, 0xad, 0x4, 0x0, 0x0, 0xb8,
 0x4, 0x0, 0x0, 0xc3, 0x4, 0x0, 0x0, 0xce,
 0x4, 0x0, 0x0, 0xd9, 0x4, 0x0, 0x0, 0xe4,
 0x4, 0x0, 0x0, 0x27, 0x0, 0x3, 0x6c, 0x6f,
 0x67, 0x3, 0x4e, 0x65, 0x77, 0xa, 0x6c, 0x6f,
 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x6f,
 0x11, 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70,
 0x75, 0x74, 0x7, 0x44, 0x65, 0x66, 0x61, 0x75,
 0x6c, 0x74, 0x4, 0x69, 0x74, 0x6f, 0x61, 0x14,
 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e,
 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x65,
 0x61, 0x64, 0x65, 0x72, 0xe, 0x2a, 0x4c, 0x6f,
 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74,
 0x70, 0x75, 0x74, 0xe, 0x2a, 0x4c, 0x6f, 0x67,
 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e,
 0x74, 0x66, 0xd, 0x2a, 0x4c, 0x6f, 0x67, 0x67,
 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74,
 0xf, 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6e,
 0xd, 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
 0x2e, 0x46, 0x61, 0x74, 0x61, 0x6c, 0xe, 0x2a,
 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x46,
 0x61, 0x74, 0x61, 0x6c, 0x66, 0xf, 0x2a, 0x4c,
 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x61,
 0x74, 0x61, 0x6c, 0x6c, 0x6e, 0xd, 0x2a, 0x4c,
 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61,
 0x6e, 0x69, 0x63, 0xe, 0x2a, 0x4c, 0x6f, 0x67,
 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x6e, 0x69,
 0x63, 0x66, 0xf, 0x2a, 0x4c, 0x6f, 0x67, 0x67,
 0x65, 0x72, 0x2e, 0x50, 0x61, 0x6e, 0x69, 0x63,
 0x6c, 0x6e, 0xd, 0x2a, 0x4c, 0x6f, 0x67, 0x67,
 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73,
 0x10, 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
 0x73, 0xe, 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65,
 0x72, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
 0x11, 0x2a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
 0x69, 0x78, 0xe, 0x2a, 0x4c, 0x6f, 0x67, 0x67,
 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
 0x72, 0x9, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74,
 0x70, 0x75, 0x74, 0x5, 0x46, 0x6c, 0x61, 0x67,
 0x73, 0x8, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61,
 0x67, 0x73, 0x6, 0x50, 0x72, 0x65, 0x66, 0x69,
 0x78, 0x9, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65,
 0x66, 0x69, 0x78, 0x6, 0x57, 0x72, 0x69, 0x74,
 0x65, 0x72, 0x5, 0x50, 0x72, 0x69, 0x6e, 0x74,
 0x6, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x66, 0x7,
 0x50, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6e, 0x5,
 0x46, 0x61, 0x74, 0x61, 0x6c, 0x6, 0x46, 0x61,
 0x74, 0x61, 0x6c, 0x66, 0x7, 0x46, 0x61, 0x74,
 0x61, 0x6c, 0x6c, 0x6e, 0x5, 0x50, 0x61, 0x6e,
 0x69, 0x63, 0x6, 0x50, 0x61, 0x6e, 0x69, 0x63,
 0x66, 0x7, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x6c,
 0x6e, 0x6, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
 0x3, 0x2, 0x3, 0x46, 0x3a, 0x48, 0x17, 0x2,
 0x4b, 0x2, 0x4b, 0xa, 0x1, 0x48, 0x17, 0x4a,
 0x3, 0x1, 0x0, 0x1, 0x4, 0x3, 0x4f, 0x29,
 0x54, 0x2, 0x4, 0x0, 0x1, 0x5, 0x3, 0x59,
 0x18, 0x59, 0x26, 0x1, 0x0, 0x3, 0x6, 0x3,
 0x5c, 0x28, 0x60, 0x19, 0x3, 0x68, 0x2, 0x69,
 0x20, 0x2, 0x60, 0x19, 0x66, 0x3, 0x5, 0x0,
 0x14, 0x7, 0x3, 0x71, 0x50, 0x72, 0x1c, 0x1,
 0x75, 0x2, 0x75, 0x2d, 0x1, 0x90, 0x1, 0x2,
 0x90, 0x1, 0x28, 0x1, 0xa0, 0x1, 0x2, 0xa0,
 0x1, 0x1c, 0x1, 0x72, 0x1c, 0x74, 0x3, 0x1,
 0x75, 0x2d, 0x76, 0x17, 0x1, 0x79, 0x3, 0x79,
 0x18, 0x1, 0x82, 0x1, 0x3, 0x82, 0x1, 0x28,
 0x1, 0x76, 0x17, 0x78, 0x4, 0x1, 0x79, 0x18,
 0x81, 0x1, 0x4, 0x7, 0x82, 0x1, 0x28, 0x89,
 0x1, 0x21, 0x7, 0x8d, 0x1, 0x4, 0x8d, 0x1,
 0x1c, 0x1, 0x89, 0x1, 0x21, 0x8c, 0x1, 0x5,
 0x2, 0x90, 0x1, 0x28, 0x91, 0x1, 0x1d, 0x1,
 0x9b, 0x1, 0x3, 0x9e, 0x1, 0x1f, 0x4, 0x91,
 0x1, 0x1d, 0x93, 0x1, 0x27, 0x2, 0x99, 0x1,
 0x4, 0x99, 0x1, 0x10, 0x1, 0x93, 0x1, 0x27,
 0x94, 0x1, 0x17, 0x1, 0x94, 0x1, 0x17, 0x96,
 0x1, 0xb, 0x2, 0xa0, 0x1, 0x1c, 0xa2, 0x1,
 0x3, 0x1, 0x0, 0x7, 0x8, 0x3, 0xab, 0x1,
 0x38, 0xb1, 0x1, 0x28, 0x6, 0xbc, 0x1, 0x2,
 0xbf, 0x1, 0x28, 0x4, 0xc2, 0x1, 0x2, 0xc3,
 0x1, 0xc, 0x2, 0xb1, 0x1, 0x28, 0xb6, 0x1,
 0xa, 0x4, 0xba, 0x1, 0x3, 0xba, 0x1, 0xe,
 0x1, 0xb6, 0x1, 0xa, 0xb9, 0x1, 0x4, 0x2,
 0xbf, 0x1, 0x28, 0xc1, 0x1, 0x3, 0x1, 0x0,
 0x3, 0x9, 0x3, 0xc8, 0x1, 0x32, 0xc9, 0x1,
 0x18, 0x1, 0xcc, 0x1, 0x2, 0xcc, 0x1, 0x28,
 0x1, 0xc9, 0x1, 0x18, 0xcb, 0x1, 0x3, 0x1,
 0x0, 0x3, 0xa, 0x3, 0xd1, 0x1, 0x22, 0xd2,
 0x1, 0x18, 0x1, 0xd5, 0x1, 0x2, 0xd5, 0x1,
 0x1f, 0x1, 0xd2, 0x1, 0x18, 0xd4, 0x1, 0x3,
 0x1, 0x0, 0x3, 0xb, 0x3, 0xda, 0x1, 0x24,
 0xdb, 0x1, 0x18, 0x1, 0xde, 0x1, 0x2, 0xde,
 0x1, 0x21, 0x1, 0xdb, 0x1, 0x18, 0xdd, 0x1,
 0x3, 0x1, 0x0, 0x1, 0xc, 0x3, 0xe2, 0x1,
 0x22, 0xe5, 0x1, 0x2, 0x2, 0x0, 0x1, 0xd,
 0x3, 0xe8, 0x1, 0x32, 0xeb, 0x1, 0x2, 0x2,
 0x0, 0x1, 0xe, 0x3, 0xee, 0x1, 0x24, 0xf1,
 0x1, 0x2, 0x2, 0x0, 0x1, 0xf, 0x3, 0xf4,
 0x1, 0x22, 0xf7, 0x1, 0xa, 0x3, 0x0, 0x1,
 0x10, 0x3, 0xfb, 0x1, 0x32, 0xfe, 0x1, 0xa,
 0x3, 0x0, 0x1, 0x11, 0x3, 0x82, 0x2, 0x24,
 0x85, 0x2, 0xa, 0x3, 0x0, 0x1, 0x12, 0x3,
 0x8a, 0x2, 0x1e, 0x8e, 0x2, 0x2, 0x3, 0x0,
 0x1, 0x13, 0x3, 0x92, 0x2, 0x25, 0x96, 0x2,
 0x2, 0x3, 0x0, 0x1, 0x14, 0x3, 0x99, 0x2,
 0x22, 0x9d, 0x2, 0x2, 0x3, 0x0, 0x1, 0x15,
 0x3, 0xa0, 0x2, 0x2b, 0xa4, 0x2, 0x2, 0x3,
 0x0, 0x1, 0x16, 0x3, 0xa7, 0x2, 0x25, 0xab,
 0x2, 0x2, 0x3, 0x0, 0x1, 0x17, 0x3, 0xae,
 0x2, 0x1d, 0xb0, 0x2, 0x2, 0x1, 0x0, 0x1,
 0x18, 0x3, 0xb4, 0x2, 0x12, 0xb6, 0x2, 0x2,
 0x1, 0x0, 0x1, 0x19, 0x3, 0xba, 0x2, 0x19,
 0xbc, 0x2, 0x2, 0x1, 0x0, 0x1, 0x1a, 0x3,
 0xbf, 0x2, 0x16, 0xc1, 0x2, 0x2, 0x1, 0x0,
 0x1, 0x1b, 0x3, 0xc4, 0x2, 0x1f, 0xc6, 0x2,
 0x2, 0x1, 0x0, 0x1, 0x1c, 0x3, 0xc9, 0x2,
 0x19, 0xcb, 0x2, 0x2, 0x1, 0x0, 0x3, 0x1d,
 0x3, 0xd1, 0x2, 0x16, 0xd2, 0x2, 0x1a, 0x1,
 0xd5, 0x2, 0x2, 0xd5, 0x2, 0x21, 0x1, 0xd2,
 0x2, 0x1a, 0xd4, 0x2, 0x3, 0x1, 0x0, 0x3,
 0x1e, 0x3, 0xda, 0x2, 0x26, 0xdb, 0x2, 0x1a,
 0x1, 0xde, 0x2, 0x2, 0xde, 0x2, 0x2a, 0x1,
 0xdb, 0x2, 0x1a, 0xdd, 0x2, 0x3, 0x1, 0x0,
 0x3, 0x1f, 0x3, 0xe3, 0x2, 0x18, 0xe4, 0x2,
 0x1a, 0x1, 0xe7, 0x2, 0x2, 0xe7, 0x2, 0x23,
 0x1, 0xe4, 0x2, 0x1a, 0xe6, 0x2, 0x3, 0x1,
 0x0, 0x1, 0x20, 0x3, 0xeb, 0x2, 0x16, 0xee,
 0x2, 0x2, 0x2, 0x0, 0x1, 0x21, 0x3, 0xf1,
 0x2, 0x26, 0xf4, 0x2, 0x2, 0x2, 0x0, 0x1,
 0x22, 0x3, 0xf7, 0x2, 0x18, 0xfa, 0x2, 0x2,
 0x2, 0x0, 0x1, 0x23, 0x3, 0xfd, 0x2, 0x16,
 0x80, 0x3, 0xa, 0x3, 0x0, 0x1, 0x24, 0x3,
 0x84, 0x3, 0x26, 0x87, 0x3, 0xa, 0x3, 0x0,
 0x1, 0x25, 0x3, 0x8b, 0x3, 0x18, 0x8e, 0x3,
 0xa, 0x3, 0x0, 0x1, 0x26, 0x3, 0x98, 0x3,
 0x2c, 0x9a, 0x3, 0x2, 0x1, 0x0,}
