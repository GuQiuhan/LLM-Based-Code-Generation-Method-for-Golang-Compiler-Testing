// Code generated by cmd/cgo; DO NOT EDIT.

//line /bigdata/qiuhan/codet5/usage/goroot/misc/cgo/testsanitizers/testdata/tsan5.go:1:1
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// Check that calls to C.malloc/C.free do not collide with the calls
// made by the os/user package.

// #cgo CFLAGS: -fsanitize=thread
// #cgo LDFLAGS: -fsanitize=thread
// #include <stdlib.h>
import _ "unsafe"

import (
	"fmt"
	"os"
	"os/user"
	"runtime"
	"sync"
)

func main() {
	u, err := user.Current()
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		// Let the test pass.
		os.Exit(0)
	}

	var wg sync.WaitGroup
	for i := 0; i < 20; i++ {
		wg.Add(2)
		go func() {
			defer wg.Done()
			for i := 0; i < 1000; i++ {
				user.Lookup(u.Username)
				runtime.Gosched()
			}
		}()
		go func() {
			defer wg.Done()
			for i := 0; i < 1000; i++ {
				p := ( /*line :44:10*/_Cfunc__CMalloc /*line :44:17*/)( /*line :44:19*/_Ctype_size_t /*line :44:27*/(len(u.Username) + 1))
				runtime.Gosched()
				func() { _cgo0 := /*line :46:12*/p; _cgoCheckPointer(_cgo0, nil); /*line :46:14*/_Cfunc_free(_cgo0); }()
			}
		}()
	}
	wg.Wait()
}
